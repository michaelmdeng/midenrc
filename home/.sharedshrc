# ----------
# Functions
# ----------

source $HOME/.mdeng/functions.sh

# --------
# Aliases
# --------

# safer fileops
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'

# alias better cmd-line tools if they are installed
if check_cmd_exists "bat"; then
	alias cat='bat'
	export MANPAGER="sh -c 'col -bx | bat -l man -p'"
fi

if check_cmd_exists "batcat"; then
	alias cat='batcat'
	export MANPAGER="sh -c 'col -bx | batcat -l man -p'"
fi

if check_cmd_exists "gcloud"; then
	alias gcloudauth='gcloud auth login | gcloud auth application-default login'
	alias gcloudlogin='gcloud auth login | gcloud auth application-default login'
fi

if check_cmd_exists "kubectx"; then
	alias kctx='kubectx'
fi
if check_cmd_exists "kubens"; then
	alias kns='kubens'
fi
if check_cmd_exists "kubectl"; then
	alias kctl='kubectl'
	alias kkctl='KCTX=$(yq eval '"'"'.contexts[].name'"'"' ~/.kube/config | fzf) && KNS=$(kubectl --context $KCTX get ns -o json | jq -r '"'"'.items[].metadata.name'"'"' | fzf) && kubectl -n $KNS --context $KCTX'
fi
if check_cmd_exists "kubectx" && check_cmd_exists "kubens" && check_cmd_exists "k9s"; then
	alias kk9s='KCTX=$(yq eval '"'"'.contexts[].name'"'"' ~/.kube/config | fzf) && KNS=$(kubectl --context $KCTX get ns -o json | jq -r '"'"'.items[].metadata.name'"'"' | fzf) && k9s -n $KNS --context $KCTX'
fi

if ! check_cmd_exists "pbcopy" > /dev/null; then
	alias pbcopy='xclip -selection clipboard'
	alias pbpaste='xclip -selection clipboard -o'
fi

alias be="bundle exec"

# --------
# Sources
# --------

if [ -f "$HOME/.scripts/z.sh" ]; then
    . "$HOME/.scripts/z.sh"
else
    echo "warning: z.sh not found. Is it installed?"
fi

if virtualenvwrapperpath=$(which virtualenvwrapper_lazy.sh 2>/dev/null); then
    source "$virtualenvwrapperpath"
else
    echo "warning: virtualenvwrapper_lazy.sh not found in PATH" >&2
fi

if [ -f "$HOME/.homesick/repos/homeshick/homeshick.sh" ]; then
    source "$HOME/.homesick/repos/homeshick/homeshick.sh"
    fpath=($HOME/.homesick/repos/homeshick/completions $fpath)
else
    echo "warning: homeshick.sh not found. Is it installed?"
fi

if [ -f "/opt/homebrew/bin/brew" ] ; then
    source <(/opt/homebrew/bin/brew shellenv)
fi

if check_cmd_exists "brew"; then
    export FZF_BASE=$(brew --prefix fzf)
fi

if check_cmd_exists "llm"; then
    export CODESTRAL_API_KEY=$(llm keys get codestral)
    export OPENROUTER_API_KEY=$(llm keys get openrouter)
fi

# ------------
# Completions
# ------------

if check_cmd_exists "npm"; then
    source <(npm completion)
fi

[[ -f "$HOME/.cargo/env" ]] && . "$HOME/.cargo/env"
