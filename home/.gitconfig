[user]
	email = michaelmdeng@gmail.com
	name = Michael Deng
[core]
	editor = nvim
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	fsmonitor = false
	untrackedcache = true
	precomposeunicode = true
[branch]
	sort = -committerdate
[checkout]
	defaultRemote = origin
	workers = 4
[commit]
	verbose = true
[credential]
	helper = store
[diff]
	algorithm = histogram
	submodule = log
	tool = nvim
[difftool "nvim"]
	cmd = nvim -d \"$LOCAL\" \"$REMOTE\"
[feature]
	manyFiles = true
[fetch]
	prune = true
[help]
	defaultBranch = main
[init]
	autocorrect = prompt
[merge]
	tool = nvim
	conflictstyle = diff3
[mergetool "nvim"]
	cmd = nvim -f -c \"Gdiff\" \"$MERGED\"
	tool = vimdiff
	prompt = false
[mergetool "vimdiff"]
	tool = vimdiff
	prompt = false
[push]
	default = current
	autoSetupRemote = true
[rerere]
	enabled = true
[status]
	submoduleSummary = true
[alias]
	co = checkout
	cob = checkout -b
	cof = !git for-each-ref --format=\"%(refname:short)\" refs/heads | fzf | xargs git checkout

	st = status
	stage = diff --staged
	staged = diff --staged

	ciai = !git commit -e -m \"$(git diff --staged | llm -t git-commit -p branch $(git rev-parse --abbrev-ref HEAD))\"
	ci = commit
	cia = commit -a
	cie = commit -e
	ciae = commit -ae
	ciea = commit -ae

	br = branch
	rb = rebase

	lo = log
	ls = log --oneline --decorate
	graph = log --oneline --decorate --graph --all

	bi = bisect
	bl = blame

	a = add
	aa = add -A

	f = fetch
	fo = fetch origin
	pl = pull
	plo = pull origin
	ph = push
	pho = push origin

	discard = "!f() { git restore --staged \"$1\" && git restore \"$1\"; }; f"

	fix2 = rebase -i HEAD~2
	fix3 = rebase -i HEAD~3
	fix4 = rebase -i HEAD~4
	fix5 = rebase -i HEAD~5
	fix6 = rebase -i HEAD~6
	fix7 = rebase -i HEAD~7
	fix8 = rebase -i HEAD~8
	fix9 = rebase -i HEAD~9

	upstream = !sh -c 'git branch -u ${1:-origin}/$(git rev-parse --abbrev-ref HEAD) $(git rev-parse --abbrev-ref HEAD)'
	sync = !git fetch origin && git rebase origin/${1:-master}

	cpick = cherry-pick -x

	continue = "!f() { \
		if git rev-parse --verify CHERRY_PICK_HEAD >/dev/null 2>&1; then \
		    git cherry-pick --continue; \
		elif git rev-parse --verify REBASE_HEAD >/dev/null 2>&1; then \
		    git rebase --continue; \
		elif git rev-parse --verify MERGE_HEAD >/dev/null 2>&1; then \
		    git commit; \
		else \
		    echo 'No operation in-progress to continue'; \
		fi; \
	}; f"
	abort = "!f() { \
		if git rev-parse --verify CHERRY_PICK_HEAD >/dev/null 2>&1; then \
		    git cherry-pick --abort; \
		elif git rev-parse --verify REBASE_HEAD >/dev/null 2>&1; then \
		    git rebase --abort; \
		elif git rev-parse --verify MERGE_HEAD >/dev/null 2>&1; then \
		    git merge --abort; \
		else \
		    echo 'No operation in-progress to abort'; \
		fi; \
	}; f"
